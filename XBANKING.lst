A51 MACRO ASSEMBLER  XBANKING                                                             01/03/2017 18:44:01 PAGE     1


MACRO ASSEMBLER A51 V7.10
OBJECT MODULE PLACED IN .\XBANKING.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE C:\Keil\C51\LIB\XBANKING.A51 SET(SMALL) DEBUG PRINT(.\XBANKING.lst) OBJECT
                      (.\XBANKING.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     $nomod51  NOLINES
                       2     ;------------------------------------------------------------------------------
                       3     ;  This file is part of the LX51 Extended Linker/Locater package
                       4     ;  Copyright (c) 2000 - 2003 Keil Elektronik GmbH and Keil Software, Inc.
                       5     ;  Version 1.04a, Variable Banking: 'far' & 'far const' C51 memory type support
                       6     ;  Version 1.04a: added register usage description
                       7     ;------------------------------------------------------------------------------
                       8     ;
                       9     ;************************ Configuration Section *******************************
                      10     ;                                                                             *
                      11     ; If the CPU provides an extended DPTR register for addressing HDATA, the     *
                      12     ; following settings must be defined:                                         *
  0094                13     ?C?XPAGE1SFR  DATA  094H  ; SFR Address of XPAGE1 register                    *
  0000                14     ?C?XPAGE1RST  EQU   0     ; XPAGE1 register value to address X:0 region       *
                      15     ;                                                                             *
                      16     ; The C51 Compiler must be used with the VARBANKING directive.  If your       *
                      17     ; application accesses XDATA memory in interrupts, VARBANKING(1) must be      *
                      18     ; applied.  With VARBANING(1) the C51 compiler saves the ?C?XPAGE1SFR and     *
                      19     ; sets this register to the ?C?XPAGE1RST value.                               *
                      20     ;                                                                             *
                      21     ;-----------------------------------------------------------------------------*
                      22     ;
  0000                23     XMEM EQU 0x02000000       ; LX51 xdata symbol offset: do not change!
  0000                24     CMEM EQU 0x01000000       ; LX51 code  symbol offset: do not change!
                      25     ;
                      26     ;******* Configuration Section for uVision2 Memory Simulation Support *********
                      27     ;                                                                             *
                      28     ; The following settings allow you to map the physical memory areas S:, T:    *
                      29     ; U: and V: of the uVision2 Simulator into the logical XDATA or CODE address  *
                      30     ; space of the LX51 linker/locater.                                           *
                      31     ;                                                                             *
  0000                32     ?B?SMEM EQU 0             ; No mapping for S: Memory                          *
  0000                33     ?B?TMEM EQU 0             ; No mapping for T: Memory                          *
  0000                34     ?B?UMEM EQU 0             ; No mapping for U: Memory                          *
  0000                35     ?B?VMEM EQU XMEM+0x20000  ; Simulated V: Memory mapped to LX51 X:0x20000 area *
                      36     ;                                                                             *
                      37     ; The above setting redirects the symbols in the area X:0x20000 .. X:0x2FFFF  *
                      38     ; into the uVision2 simulation memory area for the EEPROM  V:0 .. V:0xFFFF    *
                      39     ;                                                                             *
                      40     ;-----------------------------------------------------------------------------*
                      41     ;
                      42     ;******************************************************************************
                      43     ;                                                                             *
                      44     ; THEORY OF OPERATION                                                         *
                      45     ; -------------------                                                         *
                      46     ; This section describes how the extended LX51 linker/locater manages the     *
                      47     ; extended address spaces that are addressed with the new C51 memory types    *
                      48     ; 'far' and 'far const'.  The C51 Compiler uses 3 byte pointer generic        *
                      49     ; pointer to access these memory areas.  'far' variables are placed in the    *
                      50     ; memory class HDATA and 'far const' variables get the memory class 'HCONST'. *
                      51     ; The LX51 linker/locater allows you to locate these memory classes in the    *
                      52     ; logical 16 MBYTE CODE or 16 MBYTE XDATA spaces.                             *
                      53     ;                                                                             *
                      54     ; The memory access itself is performed via eight different subroutines that  *
                      55     ; can be configured in this assembler module.  These routines are:            *
                      56     ;    ?C?CLDXPTR, ?C?CSTXPTR  ; load/store BYTE (char)  in extended memory     *
                      57     ;    ?C?ILDXPTR, ?C?ISTXPTR  ; load/store WORD (int)   in extended memory     *
A51 MACRO ASSEMBLER  XBANKING                                                             01/03/2017 18:44:01 PAGE     2

                      58     ;    ?C?PLDXPTR, ?C?PSTXPTR  ; load/store 3-BYTE PTR   in extended memory     *
                      59     ;    ?C?LLDXPTR, ?C?LSTXPTR  ; load/store DWORD (long) in extended memory     *
                      60     ;                                                                             *
                      61     ; Each function gets as a parameter the memory address with 3 BYTE POINTER    *
                      62     ; representation in the CPU registers R1/R2/R3.  The register R3 holds the    *
                      63     ; memory type.  The C51 compiler uses the following memory types:             *
                      64     ;                                                                             *
                      65     ; R3 Value | Memory Type | Memory Class | Address Range                       *
                      66     ; -----------------------+--------------+--------------------------           *
                      67     ;    00    | data/idata  | DATA/IDATA   | I:0x00     .. I:0xFF                *
                      68     ;    01    | xdata       | XDATA        | X:0x0000   .. X:0xFFFF              *
                      69     ;  02..7F  | far         | HDATA        | X:0x010000 .. X:0x7E0000            *
                      70     ;  81..FD  | far const   | HCONST       | C:0x800000 .. C:0xFC0000 (see note) *
                      71     ;    FE    | pdata       | XDATA        | one 256-byte page in XDATA memory   *
                      72     ;    FF    | code        | CODE         | C:0x0000   .. C:0xFFFF              *
                      73     ;                                                                             *
                      74     ; Note: the far const memory area is mapped into the banked memory areas.     *
                      75     ;                                                                             *
                      76     ; The R3 values 00, 01, FE and FF are already handled within the C51 run-time *
                      77     ; library.  Only the values 02..FE are passed to the XPTR access functions    *
                      78     ; described below.  The AX51 macro assembler provides the MBYTE operator      *
                      79     ; that calculates the R3 value that needs to be passed to the XPTR access     *
                      80     ; function.   AX51 Assembler example for using XPTR access functions:         *
                      81     ;     MOV  R1,#LOW   (variable)   ; gives LSB address byte of variable        *
                      82     ;     MOV  R2,#HIGH  (variable)   ; gives MSB address byte of variable        *
                      83     ;     MOV  R3,#MBYTE (variable)   ; gives memory type byte of variable        *
                      84     ;     CALL ?C?CLDXPTR             ; load BYTE variable into A                 *
                      85     ;******************************************************************************
                      86     
                      87     
                      88                     NAME    ?C?XBANKING     ; 'far' Memory Access Support
                      89     
                      90     PUBLIC ?C?XPAGE1SFR, ?C?XPAGE1RST
                      91     PUBLIC ?C?CLDXPTR, ?C?CSTXPTR, ?C?ILDXPTR, ?C?ISTXPTR
                      92     PUBLIC ?C?PLDXPTR, ?C?PSTXPTR, ?C?LLDXPTR, ?C?LSTXPTR
                      93     
                      94     ?C?LIB_CODE     SEGMENT CODE
----                  95                     RSEG    ?C?LIB_CODE
                      96     
                      97     LOAD_BANK       MACRO
                      98     LOCAL lab
                      99                     MOV     DPL,R1
                     100                     MOV     DPH,R2
                     101                     MOV     ?C?XPAGE1SFR,R3 
                     102                     DEC     ?C?XPAGE1SFR
                     103                     ANL     ?C?XPAGE1SFR,#07FH
                     104                     CJNE    R3,#80H,lab
                     105     lab:
                     106                     ENDM
                     107     
                     108     ; Standard SFR Symbols required in XBANKING.A51
  00E0               109     ACC     DATA    0E0H
  00F0               110     B       DATA    0F0H
  0082               111     DPL     DATA    82H
  0083               112     DPH     DATA    83H
                     113     
                     114     
                     115     
                     116     ;-----------------------------------------------------------------------------
                     117     ; CLDXPTR: Load   BYTE in A             via Address given in R1/R2/R3
                     118     ; Registers which can be used without saving:  DPTR, CY, A
                     119     ;
0000                 120     ?C?CLDXPTR:     LOAD_BANK
000E 5005            128                     JNC     CLDCODE
0010 E0              129                     MOVX    A,@DPTR
0011 759400          130                     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
A51 MACRO ASSEMBLER  XBANKING                                                             01/03/2017 18:44:01 PAGE     3

0014 22              131                     RET
0015 E4              132     CLDCODE:        CLR     A
0016 93              133                     MOVC    A,@A+DPTR
0017 759400          134                     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
001A 22              135                     RET
                     136     
                     137     ;-----------------------------------------------------------------------------
                     138     ; CSTXPTR: Store  BYTE in A             via Address given in R1/R2/R3
                     139     ; Registers which can be used without saving:  DPTR, CY
                     140     ;
001B                 141     ?C?CSTXPTR:     LOAD_BANK
0029 5001            149                     JNC     CSTCODE
002B F0              150                     MOVX    @DPTR,A
002C 759400          151     CSTCODE:        MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
002F 22              152                     RET
                     153     
                     154     
                     155     ;-----------------------------------------------------------------------------
                     156     ; ILDXPTR: Load   WORD in A(LSB)/B(HSB) via Address given in R1/R2/R3 
                     157     ; Registers which can be used without saving:  DPTR, CY, A, B
                     158     ;
0030                 159     ?C?ILDXPTR:     LOAD_BANK
003E 5009            167                     JNC     ILDCODE
0040 E0              168                     MOVX    A,@DPTR
0041 F5F0            169                     MOV     B,A
0043 A3              170                     INC     DPTR
0044 E0              171                     MOVX    A,@DPTR
0045 759400          172                     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
0048 22              173                     RET
0049 E4              174     ILDCODE:        CLR     A
004A 93              175                     MOVC    A,@A+DPTR
004B F5F0            176                     MOV     B,A
004D 7401            177                     MOV     A,#1
004F 93              178                     MOVC    A,@A+DPTR
0050 759400          179                     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
0053 22              180                     RET
                     181     
                     182     ;-----------------------------------------------------------------------------
                     183     ; ISTXPTR: Store  WORD in A(HSB)/B(LSB) via Address given in R1/R2/R3 
                     184     ; Registers which can be used without saving:  DPTR, CY, A
                     185     ;
0054                 186     ?C?ISTXPTR:     LOAD_BANK
0062 5005            194                     JNC     ISTCODE
0064 F0              195                     MOVX    @DPTR,A
0065 A3              196                     INC     DPTR
0066 E5F0            197                     MOV     A,B
0068 F0              198                     MOVX    @DPTR,A
0069 759400          199     ISTCODE:        MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
006C 22              200                     RET
                     201     
                     202     ;-----------------------------------------------------------------------------
                     203     ; PLDXPTR: Load    PTR in R1/R2/R3      via Address given in R1/R2/R3 
                     204     ; Registers which can be used without saving:  DPTR, CY, A, R1, R2, R3
                     205     ;
006D                 206     ?C?PLDXPTR:     LOAD_BANK
007B 500C            214                     JNC     PLDCODE
007D E0              215                     MOVX    A,@DPTR
007E FB              216                     MOV     R3,A
007F A3              217                     INC     DPTR
0080 E0              218                     MOVX    A,@DPTR
0081 FA              219                     MOV     R2,A
0082 A3              220                     INC     DPTR
0083 E0              221                     MOVX    A,@DPTR
0084 F9              222                     MOV     R1,A
0085 759400          223                     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
0088 22              224                     RET
A51 MACRO ASSEMBLER  XBANKING                                                             01/03/2017 18:44:01 PAGE     4

0089 E4              225     PLDCODE:        CLR     A
008A 93              226                     MOVC    A,@A+DPTR
008B FB              227                     MOV     R3,A
008C 7401            228                     MOV     A,#1
008E 93              229                     MOVC    A,@A+DPTR
008F FA              230                     MOV     R2,A
0090 7402            231                     MOV     A,#2
0092 93              232                     MOVC    A,@A+DPTR
0093 F9              233                     MOV     R1,A
0094 759400          234                     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
0097 22              235                     RET
                     236     
                     237     ;-----------------------------------------------------------------------------
                     238     ; PSTXPTR: Store   PTR in R0/A/B        via Address given in R1/R2/R3 
                     239     ; Registers which can be used without saving:  DPTR, CY, A
                     240     ;
0098                 241     ?C?PSTXPTR:     LOAD_BANK
00A6 500A            249                     JNC     PSTCODE
00A8 C5F0            250                     XCH     A,B
00AA F0              251                     MOVX    @DPTR,A
00AB A3              252                     INC     DPTR
00AC C5F0            253                     XCH     A,B
00AE F0              254                     MOVX    @DPTR,A
00AF A3              255                     INC     DPTR
00B0 E8              256                     MOV     A,R0
00B1 F0              257                     MOVX    @DPTR,A
00B2 759400          258     PSTCODE:        MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
00B5 22              259                     RET
                     260     
                     261     ;-----------------------------------------------------------------------------
                     262     ; LLDXPTR: Load  DWORD in R4/R5/R6/R7   via Address given in R1/R2/R3 
                     263     ; Registers which can be used without saving:  DPTR, CY, A, R4, R5, R6, R7
                     264     ;
00B6                 265     ?C?LLDXPTR:     LOAD_BANK
00C4 500F            273                     JNC     LLDCODE
00C6 E0              274                     MOVX    A,@DPTR
00C7 FC              275                     MOV     R4,A
00C8 A3              276                     INC     DPTR
00C9 E0              277                     MOVX    A,@DPTR
00CA FD              278                     MOV     R5,A
00CB A3              279                     INC     DPTR
00CC E0              280                     MOVX    A,@DPTR
00CD FE              281                     MOV     R6,A
00CE A3              282                     INC     DPTR
00CF E0              283                     MOVX    A,@DPTR
00D0 FF              284                     MOV     R7,A
00D1 759400          285                     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
00D4 22              286                     RET
00D5 E4              287     LLDCODE:        CLR     A
00D6 93              288                     MOVC    A,@A+DPTR
00D7 FC              289                     MOV     R4,A
00D8 7401            290                     MOV     A,#1
00DA 93              291                     MOVC    A,@A+DPTR
00DB FD              292                     MOV     R5,A
00DC 7402            293                     MOV     A,#2
00DE 93              294                     MOVC    A,@A+DPTR
00DF FE              295                     MOV     R6,A
00E0 7403            296                     MOV     A,#3
00E2 93              297                     MOVC    A,@A+DPTR
00E3 FF              298                     MOV     R7,A
00E4 759400          299                     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
00E7 22              300                     RET
                     301     
                     302     ;-----------------------------------------------------------------------------
                     303     ; LSTXPTR: Store DWORD in R4/R5/R6/R7   via Address given in R1/R2/R3 
                     304     ; Registers which can be used without saving:  DPTR, CY, A
A51 MACRO ASSEMBLER  XBANKING                                                             01/03/2017 18:44:01 PAGE     5

                     305     ;
00E8                 306     ?C?LSTXPTR:     LOAD_BANK
00F6 500B            314                     JNC     LSTCODE
00F8 EC              315                     MOV     A,R4
00F9 F0              316                     MOVX    @DPTR,A
00FA A3              317                     INC     DPTR
00FB ED              318                     MOV     A,R5
00FC F0              319                     MOVX    @DPTR,A
00FD A3              320                     INC     DPTR
00FE EE              321                     MOV     A,R6
00FF F0              322                     MOVX    @DPTR,A
0100 A3              323                     INC     DPTR
0101 EF              324                     MOV     A,R7
0102 F0              325                     MOVX    @DPTR,A
0103 759400          326     LSTCODE:        MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST ; Reset Page Register 
0106 22              327                     RET
                     328     
                     329                     END
                             
A51 MACRO ASSEMBLER  XBANKING                                                             01/03/2017 18:44:01 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

??0000 . . . . . .  C ADDR   000EH   R   SEG=?C?LIB_CODE
??0001 . . . . . .  C ADDR   0029H   R   SEG=?C?LIB_CODE
??0002 . . . . . .  C ADDR   003EH   R   SEG=?C?LIB_CODE
??0003 . . . . . .  C ADDR   0062H   R   SEG=?C?LIB_CODE
??0004 . . . . . .  C ADDR   007BH   R   SEG=?C?LIB_CODE
??0005 . . . . . .  C ADDR   00A6H   R   SEG=?C?LIB_CODE
??0006 . . . . . .  C ADDR   00C4H   R   SEG=?C?LIB_CODE
??0007 . . . . . .  C ADDR   00F6H   R   SEG=?C?LIB_CODE
?B?SMEM. . . . . .  N NUMB   0000H   A   
?B?TMEM. . . . . .  N NUMB   0000H   A   
?B?UMEM. . . . . .  N NUMB   0000H   A   
?B?VMEM. . . . . .  N NUMB   0000H   A   
?C?CLDXPTR . . . .  C ADDR   0000H   R   SEG=?C?LIB_CODE
?C?CSTXPTR . . . .  C ADDR   001BH   R   SEG=?C?LIB_CODE
?C?ILDXPTR . . . .  C ADDR   0030H   R   SEG=?C?LIB_CODE
?C?ISTXPTR . . . .  C ADDR   0054H   R   SEG=?C?LIB_CODE
?C?LIB_CODE. . . .  C SEG    0107H       REL=UNIT
?C?LLDXPTR . . . .  C ADDR   00B6H   R   SEG=?C?LIB_CODE
?C?LSTXPTR . . . .  C ADDR   00E8H   R   SEG=?C?LIB_CODE
?C?PLDXPTR . . . .  C ADDR   006DH   R   SEG=?C?LIB_CODE
?C?PSTXPTR . . . .  C ADDR   0098H   R   SEG=?C?LIB_CODE
?C?XBANKING. . . .  N NUMB   -----       
?C?XPAGE1RST . . .  N NUMB   0000H   A   
?C?XPAGE1SFR . . .  D ADDR   0094H   A   
ACC. . . . . . . .  D ADDR   00E0H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
CLDCODE. . . . . .  C ADDR   0015H   R   SEG=?C?LIB_CODE
CMEM . . . . . . .  N NUMB   0000H   A   
CSTCODE. . . . . .  C ADDR   002CH   R   SEG=?C?LIB_CODE
DPH. . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
ILDCODE. . . . . .  C ADDR   0049H   R   SEG=?C?LIB_CODE
ISTCODE. . . . . .  C ADDR   0069H   R   SEG=?C?LIB_CODE
LLDCODE. . . . . .  C ADDR   00D5H   R   SEG=?C?LIB_CODE
LSTCODE. . . . . .  C ADDR   0103H   R   SEG=?C?LIB_CODE
PLDCODE. . . . . .  C ADDR   0089H   R   SEG=?C?LIB_CODE
PSTCODE. . . . . .  C ADDR   00B2H   R   SEG=?C?LIB_CODE
XMEM . . . . . . .  N NUMB   0000H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
